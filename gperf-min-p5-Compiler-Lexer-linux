#!/bin/bash
#
# test code for Compiler::Lexer
#
# git clone https://github.com/goccy/p5-Compiler-Lexer
#
LANG=C

TARGET=blib/arch/auto/Compiler/Lexer/Lexer.so
SOURCE=src/compiler/util/Compiler_reserved_keyword.cpp

git checkout -- $SOURCE

KEYWORDS=$(fgrep 'define TOTAL_KEYWORDS' $SOURCE | cut -d' ' -f3)
MAXLEN=$(fgrep 'define MAX_WORD_LENGTH' $SOURCE | cut -d' ' -f3)
WORKDIR=.gperf-min

rm -rf $WORKDIR
mkdir $WORKDIR

function compile () {
    opt=$1
    key=$(echo $opt | sed 's/^.*-k\(.*x\).*$/\1/')
    if [ -f "$WORKDIR/$key" ]; then
        echo "$opt is NG (cached)" 1>&2
        return
    fi
    opt=${opt/x/\$}
    case "$opt" in
        original)
            git checkout -- $SOURCE
            ;;
        *)
            if [[ "$opt" =~ -k ]]; then
                gperf -L C++ -Z ReservedKeywordMap -t $opt gen/reserved_keywords.gperf 2> /dev/null | sed -e '31,33d;36,41d;50,57d' > $SOURCE
            else
                gperf -L C++ -Z ReservedKeywordMap -t $opt gen/reserved_keywords.gperf 2> /dev/null | sed -e '32,34d;37,42d;51,58d' > $SOURCE
            fi
            if [ ! -s $SOURCE ]; then
                touch "$WORKDIR/$key"
                echo $opt failed 1>&2
                return
            fi
            ;;
    esac

    ./Build > /dev/null
#
# Linux
#
# $ nm -BCSn blib/arch/auto/Compiler/Lexer/Lexer.so | grep ReservedKeywordMap
# 00000000000195e0 00000000000000f1 T ReservedKeywordMap::in_word_set(char const*, unsigned int)
# 0000000000026f20 00000000000009de r ReservedKeywordMap::in_word_set(char const*, unsigned int)::lookup
# 0000000000230d60 0000000000000200 u ReservedKeywordMap::hash(char const*, unsigned int)::asso_values
# 0000000000230f60 0000000000003fc0 d ReservedKeywordMap::in_word_set(char const*, unsigned int)::wordlist
#
    # ReservedKeywordMap::in_word_set() code size with alignment
    in_word_set=$(echo $(nm -n $TARGET | grep -A1 " T .*ReservedKeywordMap") | while read s sy1 ns e sy2 ne; do echo $((0x$e - 0x$s)); done)
    # ReservedKeywordMap::hash()::asso_values table size with alignment
    asso_values=$(echo $(nm -n $TARGET | grep -A1 " u .*ReservedKeywordMap") | while read s sy1 ns e sy2 ne; do echo $((0x$e - 0x$s)); done)
    # ReservedKeywordMap::in_word_set()::wordlist table size with alignment
    wordlist=$(echo $(nm -n $TARGET    | grep -A1 " d .*ReservedKeywordMap") | while read s sy1 ns e sy2 ne; do echo $((0x$e - 0x$s)); done)
    # ReservedKeywordMap::in_word_set()::lookup table size with alignment
    lookup=$(echo $(nm -n $TARGET    | grep -A1 " r .*ReservedKeywordMap") | while read s sy1 ns e sy2 ne; do echo $((0x$e - 0x$s)); done)
    
    total=$((in_word_set + asso_values + wordlist + lookup))
    printf "in_word_set %04x asso_values %04x wordlist %05x lookup %04x total %6d filesize %d [$opt]\n" \
        $in_word_set $asso_values $wordlist $lookup $total $(stat -c %s $TARGET)
}

compile original
compile '-D'
compile '-D -m10'

# $MAXLEN
keys=$(seq 1 3 | awk 'BEGIN{printf"echo -k"}{printf"{,%s},",$0}END{print"x"}' | /bin/bash | sed -e 's/,,*/,/g' -e 's/-k,/-k/g' -e 's/-kx//')

for i in 0 1 2; do
    for j in 1 3 5; do
        for k in $keys; do
            compile "-i$i -j$j $k"
        done
    done
done
